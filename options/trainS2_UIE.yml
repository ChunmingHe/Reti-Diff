name: RetiDiff_S2Model_UIE
model_type: RetiDiff_S2Model
scale: 1
num_gpu: auto  # auto: can infer from your visible devices automatically. official: 4 GPUs
manual_seed: 0

pretrain_decomnet_low: pretrained_models/init_low.pth
pretrain_decomnet_high: pretrained_models/init_high.pth

# dataset and data loader settings
datasets:
  train:
    name: TrainSet
    type: DeblurPairedDataset
    dataroot_gt: # put your own path here
    dataroot_lq: # put your own path here
    geometric_augs: true

    dataset_type: chaos

    filename_tmpl: '{}'
    io_backend:
      type: disk

    num_worker_per_gpu: 12
    batch_size_per_gpu: 8
    mini_batch_sizes: [ 4,4,2,2,1 ]             # Batch size per gpu
    iters: [ 65000,35000, 39000, 33000,24000 ]
    gt_size: 256   # Max patch size for progressive training
    gt_sizes: [ 128, 160, 192, 224, 256 ]  # Patch sizes for progressive training.

    # data loader
    use_shuffle: true
    dataset_enlarge_ratio: 500
    prefetch_mode: ~


  # Uncomment these for validation
  val:
    name: ValSet
    type: DeblurPairedDataset
    dataset_type: chaos
    dataroot_gt: /data/fcy/Datasets/Underwater/UIEB/test/hq
    dataroot_lq: /data/fcy/Datasets/Underwater/UIEB/test/lq
    io_backend:
      type: disk

# network structures
network_g:
  type: RetiDiffS2
  n_encoder_res: 5
  inp_channels: 3
  out_channels: 3
  dim: 64
  num_blocks: [ 3,3,3,3 ]
  num_refinement_blocks: 3
  heads: [ 1,2,4,8 ]
  ffn_expansion_factor: 2.66
  bias: False
  LayerNorm_type: WithBias
  n_denoise_res: 1
  linear_start: 0.1
  linear_end: 0.99
  timesteps: 4

# network structures
network_S1:
  type: RetiDiffS2
  n_encoder_res: 5
  inp_channels: 3
  out_channels: 3
  dim: 64
  num_blocks: [ 3,3,3,3 ]
  num_refinement_blocks: 3
  heads: [ 1,2,4,8 ]
  ffn_expansion_factor: 2.66
  bias: False
  LayerNorm_type: WithBias

# path
path:
  pretrain_network_g: # put pretrained S1 model here
  pretrain_network_S1: # put pretrained S1 model here
  param_key_g: params_ema
  strict_load_g: False
  resume_state: ~
  ignore_resume_networks: network_S1

# training settings
train:
  ema_decay: 0.999

  optim_g:
    type: AdamW
    lr: !!float 2e-4
    weight_decay: 0
    betas: [ 0.9, 0.999 ]

  scheduler:
    type: MultiStepLR
    milestones: [ 200000 ]
    gamma: 1

  encoder_iter: 45000
  total_iter: 200000
  lr_encoder: !!float 2e-4
  lr_sr: !!float 2e-4
  gamma_encoder: 0.9
  gamma_sr: 0.9
  lr_decay_encoder: 5000
  lr_decay_sr: 5000
  warmup_iter: -1  # no warm up

  mixing_augs:
    mixup: false
    mixup_beta: 1.2
    use_identity: true

  # losses
  pixel_opt:
    type: L1Loss
    loss_weight: 1.0
    reduction: mean

  kd_opt:
    type: KDLoss
    loss_weight: 1
    temperature: 0.15

  recon_opt:
    type: L1Loss
    loss_weight: 1.0
    reduction: mean

# Uncomment these for validation
# validation settings
val:
  window_size: 8
  val_freq: !!float 5e3
  save_img: True

  metrics:
    psnr: # metric name
      type: calculate_psnr
      crop_border: 0
      test_y_channel: false
    ssim:
      type: calculate_ssim
      crop_border: 0
      test_y_channel: false

# logging settings
logger:
  print_freq: 1000
  save_checkpoint_freq: !!float 5e3
  use_tb_logger: true
  wandb:
    project: ~
    resume_id: ~

# dist training settings
dist_params:
  backend: nccl
  port: 29500
